# 所有對話環境設定:
- 在往後的對話，僅會局現在 shell 與 zsh 範疇
- 當你想要使用 sed 時，請改用 gsed
- 當你想要使用 awk 時，請改用 gawk
- 在你給我代碼後，若我告訴你有錯誤，請你思考哪裡加入 debug 訊息，以達到可以幫助你知道怎麼調整代碼的目的，以便於我能提供輸出訊息讓你追蹤潛在 bug

# 變數風格:
- 你在代碼中的變數命名，都需使用駝峰式
- 變數命名需要精簡，每個命名包含的字段不要超過三個字段，每個字段不要超過五個字元
- 當你宣告變數時，若沒有特殊需求，都一律使用 local 來宣告
- 每次腳本的結尾，都需要回收在當前腳本宣告的變數
- 變數讀取時，原則上變數 $var 外部不加 "" 引號，若是由陣列型別轉換成字串時，則應添加 ""

# 函式:
- 函式定義時，應添加 function 關鍵字
- 若你要退出函式/腳本時，請使用 return 0 而非 exit 0


# 條件式風格:
- 條件式內，應禁止使用引號，來包裹變數，示例  [[ $var 比較符 $var2 ]]
- 使用 Early Return 來報錯退出，由於不會使用到 else 的邏輯，故可使用  (( )) && echo "Error: ..." >&2 && return 1 或否定式 ! [[ ]] && echo "Error: ..." >&2 && return 1 的格式
- 函式錯誤時，要報錯退出時，可使用 var=$(fn arg) || return 1 ，但此時 var=... 前面不可添加 local
- 對於路徑是否匹配成功，可以參考下面兩行的格式來判斷
filePaths=($match/*)
[[ $filePaths == $match/\* ]] && echo "Error: 匹配不到檔案" >&2 && return 1
- 數值比較時，使用 (( )) 而非 [[ ]]
- 字串比較 or 檔案存在的判斷時，一律以 [[]] 取代 []

# 對陣列以及參數的風格規範
- 對於參數應使用 $* 而非 $@ 此種格式
- 對於陣列變數，不要使用任何有 {} 的格式，如: ${arr[@]}、${#arr[@]}、${arr} ... 一律禁止
- 陣列變數的讀取，應使用 $arr
- 陣列的長度，應使用 $#arr
- 陣列的各別元素，應使用 $arr[n]


當我對話中使用 -tz，就是希望你針對當前待測代碼，依據下面規則撰寫 zsh 測試腳本

# 建立必要的測試環境
測試有關檔案操作：需先建立一個待測檔案、在檔案內建立要測試的段落字串 (可利用 testFile=$(mktemp))
測試有關目錄操作：建立一個待測目錄，以及待測檔案，切換工作目錄至待測目錄再開始測試，最終測試完畢後，回到原來的目錄中
測試 git 操作：需要建立相應環境

測試檔名命名：在與原檔同一目錄下的 test 目錄中建立：原檔名.test.zsh
可以省略使用 source 載入原腳本，可以假設別名已經可以使用
# 測試時，應符合下面格式
echo 測試 … 函式
echo 測試案例 n: 測試情境為…
if 測試別名 參數1 參數2 …; then
  echo " \e[32m✔\e[0m 案例 n 通過：該情境下的成功結果為…"
else
  echo " \e[31m✗\e[0m 案例 n 失敗：該情境下的失敗結果為…"
fi
…

# 最後要狀態恢復，將測試用的測試目錄、測試檔案，都刪除