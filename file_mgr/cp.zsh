#! /bin/zsh

# 別名 cp
# cp file1 [file2 ...] dir  超過 2 個參數，帶表示拷貝到最後一個參數目錄中
# cp <dir1> <dir2> 兩個參數都是目錄，若名稱相同，則直接複製過去，若名稱不同，將第一個參數目錄，複製到第二個參數目錄下
# cp <file1> <file2/dir> 兩個參數都是目錄，若名稱相同，則直接複製過去
# 若名稱不同(就將第二個視為目錄參數)，將第一個參數檔案，複製到第二個參數目錄下

# *** 原生 cp 指令 ***
# 參數只有兩個時，第二個目錄已經有既存的目錄時，會將第一個參數的目錄或檔案，放到第二個目錄中
# 若第一個參數為目錄，第二個參數也會直接被視為目錄，cp 會將第一個參數目錄放到第二個參數目錄下
# 而此處的自定 cp，則是會將第一個參數目錄，直接複製成第二個參數目錄 （PS: 並非放到第二參數目錄下）
# 而自定目錄，最大目的是能夠自動建立目錄，不會因為目錄不存在而報錯
# ************************

# 若要覆蓋原來內建指令 cp，則腳本中要使用原來 cp 則要用路徑 /bin/cp 執行，否則會無限循環
# Mac 檔案系統中，不容許檔案與目錄，名稱相同



if (( $#* > 2 )) {
  # 先篩選參數數量大於 2的情況
  # 會將最後參數，當作「目錄路徑」，故會自動建立該目錄
  local args=($*)
  local argFinal=$args[$#*]
  mkdir -p "$argFinal"
  /bin/cp -r $*
  unset args argFinal
  return 0
}


if [[ -d $1 ]] {
  # 篩選第一個參數為目錄的情況
  # 若兩個參數末端路徑同名，則直接複製過去
  # 若不同名，則將第一個參數目錄，複製到第二個參數目錄下
if [[ ${1:t} == ${2:t} ]] {
  local dir=${2:h}
  mkdir -p "$dir"
  /bin/cp -r $1 $dir
  unset dir
  return 0
}
  mkdir -p "$2"
  /bin/cp -r $1 $2
  return 0
}


# 最終篩選剩餘的是，兩個參數、「第一個參數為檔案」的情況
# 若兩個參數末端路徑同名，則直接複製過去
# 若不同名，則將第一個參數檔案，複製到第二個參數目錄下
if [[ ${1:t} == ${2:t} ]] {
    local dir=${2:h}
    mkdir -p "$dir"
    unset dir
} else {
    mkdir -p "$2"
}

/bin/cp -r $*